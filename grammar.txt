program     ->  declaration* EOF;
declaration ->  funDecl | varDecl | statement | classDecl ;
classDecl   ->  "class" IDENTIFIER ( "<" IDENTIFIER )? "{" function* "}" ;
funDecl     ->  "fun" function ;
function    ->  IDENTIFIER "(" parameters? ")" block ;
parameters  ->  IDENTIFIER ( "," IDENTIFIER )* ;
varDecl     ->  "var" IDENTIFIER ( "=" expression )? ";" ;
statement   ->  exprStmt | printStmt | block | ifStmt | whileStmt | forStmt | returnStmt ;
returnStmt  ->  "return" expression? ";" ;
forStmt     ->  "for" "(" ( varDecl | exprStmt | ";" ) expression? ";" expression? ")" statement;
whileStmt   ->  "while" "(" expression ")" statement ;
ifStmt      ->  "if" "(" expression ")" statement ( "else" statement )? ;
block       -> "{" declaration* "}" ;
exprStmt    ->  expression ";" ;
printStmt   ->  "print" expression ";" ;
arguments   ->  expression ( "," expression )* ;
expression  ->  assignment ;
assignment  ->  ( call "." )? IDENTIFIER "=" assignment | logic_or ;
logic_or    ->  logic_and ( "or" logic_and )* ;
logic_and   ->  equality ( "and" equality )* ;
equality    ->  comparison ( ( "!=" | "==" ) comparison )* ;
comparison  ->  term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term        ->  factor ( ( "-" | "+" ) factor )* ;
factor      ->  unary ( ( "/" | "*" ) unary )* ;
unary       ->  ( "!" | "-" ) unary | call ;
call        ->  primary ( "(" arguments? ")" | "." IDENTIFIER )* ;
primary     ->  NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")" | IDENTIFIER | "this" | "super" "." IDENTIFIER ;
